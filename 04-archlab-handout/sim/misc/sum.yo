                            | # Execution begins at address 0 
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program 
                            | 
0x018:                      |   .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |   .quad 0x00a
0x020: 2800000000000000     |   .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |   .quad 0x0b0
0x030: 3800000000000000     |   .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |   .quad 0xc00
0x040: 0000000000000000     |   .quad 0
                            | 
0x048:                      | main:	
0x048: 30f71800000000000000 |   irmovq ele1,%rdi
0x052: 805c00000000000000   | 	call sum
0x05b: 90                   | 	ret
                            | 
0x05c:                      | sum:
0x05c: 6300                 |   xorq %rax, %rax # rax = 0, 初始化为0，用来保存sum值，并且是return值所在寄存器
0x05e: 6277                 |   andq %rdi,%rdi
0x060: 748800000000000000   |   jne test # 判断链表是否为空，如果为空就return,不为空就继续
0x069:                      | loop:
0x069: 50370000000000000000 |   mrmovq (%rdi), %rbx
0x073: 6030                 |   addq %rbx,%rax # sum += ls->val
0x075: 50770800000000000000 |   mrmovq 8(%rdi),%rdi # ls = ls->next,
                            |               # val地址后8字节为下一个节点地址，然后让当前指针指向知道next节点地址
                            |   # andq %rdi,%rdi
0x07f: 706900000000000000   |   jmp loop
0x088:                      | test:
                            |   # jne loop # 继续循环
0x088: 90                   |   ret # exit
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
